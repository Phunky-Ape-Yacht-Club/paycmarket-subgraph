// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PhunkyApe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PhunkyApe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PhunkyApe must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PhunkyApe", id.toString(), this);
    }
  }

  static load(id: string): PhunkyApe | null {
    return changetype<PhunkyApe | null>(store.get("PhunkyApe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isForSale(): boolean {
    let value = this.get("isForSale");
    return value!.toBoolean();
  }

  set isForSale(value: boolean) {
    this.set("isForSale", Value.fromBoolean(value));
  }

  get minValue(): string | null {
    let value = this.get("minValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minValue(value: string | null) {
    if (!value) {
      this.unset("minValue");
    } else {
      this.set("minValue", Value.fromString(<string>value));
    }
  }

  get currentOwner(): Bytes {
    let value = this.get("currentOwner");
    return value!.toBytes();
  }

  set currentOwner(value: Bytes) {
    this.set("currentOwner", Value.fromBytes(value));
  }

  get blockNumberListedForSale(): string | null {
    let value = this.get("blockNumberListedForSale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockNumberListedForSale(value: string | null) {
    if (!value) {
      this.unset("blockNumberListedForSale");
    } else {
      this.set("blockNumberListedForSale", Value.fromString(<string>value));
    }
  }

  get phunkyApeTransfers(): Array<string> {
    let value = this.get("phunkyApeTransfers");
    return value!.toStringArray();
  }

  set phunkyApeTransfers(value: Array<string>) {
    this.set("phunkyApeTransfers", Value.fromStringArray(value));
  }

  get phunkyApeBids(): Array<string> {
    let value = this.get("phunkyApeBids");
    return value!.toStringArray();
  }

  set phunkyApeBids(value: Array<string>) {
    this.set("phunkyApeBids", Value.fromStringArray(value));
  }
}

export class PhunkyApeTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PhunkyApeTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PhunkyApeTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PhunkyApeTransfer", id.toString(), this);
    }
  }

  static load(id: string): PhunkyApeTransfer | null {
    return changetype<PhunkyApeTransfer | null>(
      store.get("PhunkyApeTransfer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): string | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockNumber(value: string | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromString(<string>value));
    }
  }

  get isSale(): boolean {
    let value = this.get("isSale");
    return value!.toBoolean();
  }

  set isSale(value: boolean) {
    this.set("isSale", Value.fromBoolean(value));
  }

  get salePrice(): string | null {
    let value = this.get("salePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set salePrice(value: string | null) {
    if (!value) {
      this.unset("salePrice");
    } else {
      this.set("salePrice", Value.fromString(<string>value));
    }
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get phunkyApe(): string {
    let value = this.get("phunkyApe");
    return value!.toString();
  }

  set phunkyApe(value: string) {
    this.set("phunkyApe", Value.fromString(value));
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bid", id.toString(), this);
    }
  }

  static load(id: string): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidAmount(): string {
    let value = this.get("bidAmount");
    return value!.toString();
  }

  set bidAmount(value: string) {
    this.set("bidAmount", Value.fromString(value));
  }

  get blockNumber(): string | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockNumber(value: string | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromString(<string>value));
    }
  }

  get phunkyApe(): string {
    let value = this.get("phunkyApe");
    return value!.toString();
  }

  set phunkyApe(value: string) {
    this.set("phunkyApe", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }
}
